---
name: lint_and_test
on:
  push:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  checks: write
  actions: read

jobs:
  docker_build:
    name: "Docker build"
      if: |
        github.ref_name == 'main'
        || startsWith(github.ref_name, 'release/')
        || startsWith(github.ref_name, 'pre-release/')
        || startsWith(github.ref_name, 'check/')
      needs:
        - js_test
        - rails_lint
        - rails_test
        - yamllint
        - shellcheck
        - dockerlint
      env:
        SOCI_VERSION: "0.8.0"
      strategy:
        matrix:
          include:
            - platform: linux/amd64
              runner: ubuntu-latest
              platform-pair: linux-amd64
            - platform: linux/arm64
              runner: HostedLinuxARM64
              platform-pair: linux-arm64
      runs-on: ${{ matrix.runner}}
      outputs:
        tag: ${{ steps.ecr-push.outputs.tag }}
      steps:
        - name: "Checkout"
          uses: actions/checkout@v4
        - name: "Set up Docker Buildx"
          uses: docker/setup-buildx-action@v3
        - name: "put git revision into a file"
          run: |
            git rev-parse HEAD > .git-revision
        # yamllint disable rule:line-length
        - name: "Install soci-snapshotter"
          run: |
            curl -L https://github.com/awslabs/soci-snapshotter/releases/download/v$SOCI_VERSION/soci-snapshotter-$SOCI_VERSION-${{ matrix.platform-pair }}.tar.gz | \
              tar zx -C /usr/local/bin soci soci-snapshotter-grpc
        # yamllint enable rule:line-length
        - name: "Enable containerd-snapshotter"
          run: |
            echo '{"features":{"containerd-snapshotter":true}}' | jq | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
        - name: Generate Github token
          id: generate_token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ secrets.TECHOUSE_REPO_READ_APP_ID }}
            private-key: ${{ secrets.TECHOUSE_REPO_READ_APP_PRIVATE_KEY }}
            owner: ${{ github.repository_owner }}

        - name: 'Configure AWS credentials'
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::782875150730:role/github-actions-role
            aws-region: 'ap-northeast-1'
        - name: 'Login to Amazon ECR'
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Set tag env variable
          id: set_image_tag_env
          run: |
            SHA=${{ github.sha }}
            TAG=$(TZ=JST-9 date '+%Y%m%d')-${SHA:0:7}
            echo "ECR_IMAGE_TAG=$TAG" >> $GITHUB_ENV
            echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=ch-workforce" >> $GITHUB_ENV

        - name: "Docker build"
          uses: docker/build-push-action@v6
          id: docker-build
          with:
            platforms: ${{ matrix.platform }}
            secrets: |
              "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY_DEVELOPMENT }}"
              "BUNDLE_ENTERPRISE__CONTRIBSYS__COM=${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}"
              "BUNDLE_GITHUB__COM=x-access-token:${{ steps.generate_token.outputs.token }}"
            context: .
            file: Dockerfile
            outputs: type=docker,dest=/tmp/myimage.tar
            push: false
            tags: myimage:latest
            cache-from: type=gha,scope=build-${{ matrix.platform-pair }}
            cache-to: type=gha,scope=build-${{ matrix.platform-pair }},mode=max
        - name: 'Load Docker image'
          run: |
            docker load --input /tmp/myimage.tar
        - name: 'Push to Amazon ECR'
          id: ecr-push
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ch-workforce
          run: |
            SHA=${{ github.sha }}
            TAG=$(TZ=JST-9 date '+%Y%m%d')-${SHA:0:7}
            docker tag myimage:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}
            docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}
            echo "::warning:: ECR push succeeded. TAG::${TAG}"
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
            echo "image_full_uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}" >> $GITHUB_OUTPUT
        - name: "Push soci index"
          run: |
            sudo soci --namespace moby create ${{ steps.ecr-push.outputs.image_full_uri }}
            sudo soci --namespace moby push --user AWS:$(aws ecr get-login-password --region $AWS_REGION) \
              ${{ steps.ecr-push.outputs.image_full_uri }}
        - name: Export digest
          run: |
            mkdir -p /tmp/digests
            digest="${{ steps.docker-build.outputs.digest }}"
            touch "/tmp/digests/${digest#sha256:}"
        - name: Upload digest
          uses: actions/upload-artifact@v4
          with:
            name: digests-${{ matrix.platform-pair }}
            path: /tmp/digests/*
            if-no-files-found: error
            retention-days: 1

  lint_and_test:
    name: "Lint and Test"
    runs-on: ubuntu-latest
    steps:
      - run: echo "Do something"
  docker_build_and_push_to_ecr:
    name: "Docker build and push to ECR"
    if: |
      github.ref_name == 'main'
    needs:
      - lint_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Do something
        run: echo "Do something"
  deploy:
    name: "Deploy to AWS ECS"
    runs-on: ubuntu-latest
    needs:
      - docker_build
    steps:
      - name: Do something
        run: echo "Do something"